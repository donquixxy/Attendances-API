// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dg-test/ent/attendance"
	"dg-test/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AttendanceUpdate is the builder for updating Attendance entities.
type AttendanceUpdate struct {
	config
	hooks    []Hook
	mutation *AttendanceMutation
}

// Where appends a list predicates to the AttendanceUpdate builder.
func (au *AttendanceUpdate) Where(ps ...predicate.Attendance) *AttendanceUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetIDUser sets the "id_user" field.
func (au *AttendanceUpdate) SetIDUser(s string) *AttendanceUpdate {
	au.mutation.SetIDUser(s)
	return au
}

// SetType sets the "type" field.
func (au *AttendanceUpdate) SetType(i int) *AttendanceUpdate {
	au.mutation.ResetType()
	au.mutation.SetType(i)
	return au
}

// AddType adds i to the "type" field.
func (au *AttendanceUpdate) AddType(i int) *AttendanceUpdate {
	au.mutation.AddType(i)
	return au
}

// SetCreatedAt sets the "created_at" field.
func (au *AttendanceUpdate) SetCreatedAt(t time.Time) *AttendanceUpdate {
	au.mutation.SetCreatedAt(t)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AttendanceUpdate) SetUpdatedAt(t time.Time) *AttendanceUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// Mutation returns the AttendanceMutation object of the builder.
func (au *AttendanceUpdate) Mutation() *AttendanceMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AttendanceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AttendanceUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AttendanceUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AttendanceUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AttendanceUpdate) check() error {
	if v, ok := au.mutation.GetType(); ok {
		if err := attendance.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Attendance.type": %w`, err)}
		}
	}
	return nil
}

func (au *AttendanceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(attendance.Table, attendance.Columns, sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.IDUser(); ok {
		_spec.SetField(attendance.FieldIDUser, field.TypeString, value)
	}
	if value, ok := au.mutation.GetType(); ok {
		_spec.SetField(attendance.FieldType, field.TypeInt, value)
	}
	if value, ok := au.mutation.AddedType(); ok {
		_spec.AddField(attendance.FieldType, field.TypeInt, value)
	}
	if value, ok := au.mutation.CreatedAt(); ok {
		_spec.SetField(attendance.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(attendance.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attendance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AttendanceUpdateOne is the builder for updating a single Attendance entity.
type AttendanceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AttendanceMutation
}

// SetIDUser sets the "id_user" field.
func (auo *AttendanceUpdateOne) SetIDUser(s string) *AttendanceUpdateOne {
	auo.mutation.SetIDUser(s)
	return auo
}

// SetType sets the "type" field.
func (auo *AttendanceUpdateOne) SetType(i int) *AttendanceUpdateOne {
	auo.mutation.ResetType()
	auo.mutation.SetType(i)
	return auo
}

// AddType adds i to the "type" field.
func (auo *AttendanceUpdateOne) AddType(i int) *AttendanceUpdateOne {
	auo.mutation.AddType(i)
	return auo
}

// SetCreatedAt sets the "created_at" field.
func (auo *AttendanceUpdateOne) SetCreatedAt(t time.Time) *AttendanceUpdateOne {
	auo.mutation.SetCreatedAt(t)
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AttendanceUpdateOne) SetUpdatedAt(t time.Time) *AttendanceUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// Mutation returns the AttendanceMutation object of the builder.
func (auo *AttendanceUpdateOne) Mutation() *AttendanceMutation {
	return auo.mutation
}

// Where appends a list predicates to the AttendanceUpdate builder.
func (auo *AttendanceUpdateOne) Where(ps ...predicate.Attendance) *AttendanceUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AttendanceUpdateOne) Select(field string, fields ...string) *AttendanceUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Attendance entity.
func (auo *AttendanceUpdateOne) Save(ctx context.Context) (*Attendance, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AttendanceUpdateOne) SaveX(ctx context.Context) *Attendance {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AttendanceUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AttendanceUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AttendanceUpdateOne) check() error {
	if v, ok := auo.mutation.GetType(); ok {
		if err := attendance.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Attendance.type": %w`, err)}
		}
	}
	return nil
}

func (auo *AttendanceUpdateOne) sqlSave(ctx context.Context) (_node *Attendance, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(attendance.Table, attendance.Columns, sqlgraph.NewFieldSpec(attendance.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Attendance.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, attendance.FieldID)
		for _, f := range fields {
			if !attendance.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != attendance.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.IDUser(); ok {
		_spec.SetField(attendance.FieldIDUser, field.TypeString, value)
	}
	if value, ok := auo.mutation.GetType(); ok {
		_spec.SetField(attendance.FieldType, field.TypeInt, value)
	}
	if value, ok := auo.mutation.AddedType(); ok {
		_spec.AddField(attendance.FieldType, field.TypeInt, value)
	}
	if value, ok := auo.mutation.CreatedAt(); ok {
		_spec.SetField(attendance.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(attendance.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Attendance{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{attendance.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
