// Code generated by ent, DO NOT EDIT.

package history

import (
	"dg-test/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.History {
	return predicate.History(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.History {
	return predicate.History(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldID, id))
}

// IDUser applies equality check predicate on the "id_user" field. It's identical to IDUserEQ.
func IDUser(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldIDUser, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldType, v))
}

// Time applies equality check predicate on the "time" field. It's identical to TimeEQ.
func Time(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldTime, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldUpdatedAt, v))
}

// IDUserEQ applies the EQ predicate on the "id_user" field.
func IDUserEQ(v string) predicate.History {
	return predicate.History(sql.FieldEQ(FieldIDUser, v))
}

// IDUserNEQ applies the NEQ predicate on the "id_user" field.
func IDUserNEQ(v string) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldIDUser, v))
}

// IDUserIn applies the In predicate on the "id_user" field.
func IDUserIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldIn(FieldIDUser, vs...))
}

// IDUserNotIn applies the NotIn predicate on the "id_user" field.
func IDUserNotIn(vs ...string) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldIDUser, vs...))
}

// IDUserGT applies the GT predicate on the "id_user" field.
func IDUserGT(v string) predicate.History {
	return predicate.History(sql.FieldGT(FieldIDUser, v))
}

// IDUserGTE applies the GTE predicate on the "id_user" field.
func IDUserGTE(v string) predicate.History {
	return predicate.History(sql.FieldGTE(FieldIDUser, v))
}

// IDUserLT applies the LT predicate on the "id_user" field.
func IDUserLT(v string) predicate.History {
	return predicate.History(sql.FieldLT(FieldIDUser, v))
}

// IDUserLTE applies the LTE predicate on the "id_user" field.
func IDUserLTE(v string) predicate.History {
	return predicate.History(sql.FieldLTE(FieldIDUser, v))
}

// IDUserContains applies the Contains predicate on the "id_user" field.
func IDUserContains(v string) predicate.History {
	return predicate.History(sql.FieldContains(FieldIDUser, v))
}

// IDUserHasPrefix applies the HasPrefix predicate on the "id_user" field.
func IDUserHasPrefix(v string) predicate.History {
	return predicate.History(sql.FieldHasPrefix(FieldIDUser, v))
}

// IDUserHasSuffix applies the HasSuffix predicate on the "id_user" field.
func IDUserHasSuffix(v string) predicate.History {
	return predicate.History(sql.FieldHasSuffix(FieldIDUser, v))
}

// IDUserEqualFold applies the EqualFold predicate on the "id_user" field.
func IDUserEqualFold(v string) predicate.History {
	return predicate.History(sql.FieldEqualFold(FieldIDUser, v))
}

// IDUserContainsFold applies the ContainsFold predicate on the "id_user" field.
func IDUserContainsFold(v string) predicate.History {
	return predicate.History(sql.FieldContainsFold(FieldIDUser, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int) predicate.History {
	return predicate.History(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int) predicate.History {
	return predicate.History(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int) predicate.History {
	return predicate.History(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int) predicate.History {
	return predicate.History(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int) predicate.History {
	return predicate.History(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int) predicate.History {
	return predicate.History(sql.FieldLTE(FieldType, v))
}

// TimeEQ applies the EQ predicate on the "time" field.
func TimeEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "time" field.
func TimeNEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "time" field.
func TimeIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "time" field.
func TimeNotIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "time" field.
func TimeGT(v time.Time) predicate.History {
	return predicate.History(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "time" field.
func TimeGTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "time" field.
func TimeLT(v time.Time) predicate.History {
	return predicate.History(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "time" field.
func TimeLTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldLTE(FieldTime, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.History {
	return predicate.History(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.History {
	return predicate.History(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.History {
	return predicate.History(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.History {
	return predicate.History(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.History {
	return predicate.History(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.History {
	return predicate.History(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.History {
	return predicate.History(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.History) predicate.History {
	return predicate.History(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.History) predicate.History {
	return predicate.History(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.History) predicate.History {
	return predicate.History(sql.NotPredicates(p))
}
